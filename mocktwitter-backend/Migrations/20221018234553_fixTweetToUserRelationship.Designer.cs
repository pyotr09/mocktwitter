// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mocktwitter_backend.Data;

#nullable disable

namespace mocktwitter_backend.Migrations
{
    [DbContext(typeof(MockTwitterContext))]
    [Migration("20221018234553_fixTweetToUserRelationship")]
    partial class fixTweetToUserRelationship
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("mocktwitter_backend.Models.MockTweet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tweet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MockTweets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TimeStamp = new DateTime(2022, 9, 22, 15, 49, 12, 0, DateTimeKind.Local),
                            Tweet = "Trustwell Certification",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            TimeStamp = new DateTime(2022, 9, 22, 15, 25, 0, 0, DateTimeKind.Local),
                            Tweet = "Continous Monitoring",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            TimeStamp = new DateTime(2022, 9, 22, 15, 0, 12, 0, DateTimeKind.Local),
                            Tweet = "Responsibily Sourced GaS!",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            TimeStamp = new DateTime(2022, 9, 22, 14, 49, 12, 0, DateTimeKind.Local),
                            Tweet = "Measurement economy",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            TimeStamp = new DateTime(2022, 9, 21, 9, 0, 12, 0, DateTimeKind.Local),
                            Tweet = "Methane Concentrations",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            TimeStamp = new DateTime(2022, 9, 21, 8, 0, 0, 0, DateTimeKind.Local),
                            Tweet = "Quantified Total Site Emissions",
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            TimeStamp = new DateTime(2022, 9, 20, 6, 49, 12, 0, DateTimeKind.Local),
                            Tweet = "Digital Canopy",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            TimeStamp = new DateTime(2022, 9, 20, 1, 49, 12, 0, DateTimeKind.Local),
                            Tweet = "Methane Moment",
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            TimeStamp = new DateTime(2022, 9, 19, 21, 49, 12, 0, DateTimeKind.Local),
                            Tweet = "RSG",
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            TimeStamp = new DateTime(2022, 9, 22, 16, 25, 0, 0, DateTimeKind.Local),
                            Tweet = "Verified Methane",
                            UserId = 2
                        },
                        new
                        {
                            Id = 11,
                            TimeStamp = new DateTime(2022, 9, 22, 15, 20, 0, 0, DateTimeKind.Local),
                            Tweet = "Responsibily drilled and maintained",
                            UserId = 2
                        },
                        new
                        {
                            Id = 12,
                            TimeStamp = new DateTime(2022, 9, 22, 14, 30, 12, 0, DateTimeKind.Local),
                            Tweet = "Demonstrate Water Stewardship",
                            UserId = 2
                        },
                        new
                        {
                            Id = 13,
                            TimeStamp = new DateTime(2022, 9, 20, 6, 15, 12, 0, DateTimeKind.Local),
                            Tweet = "Reduce GHG Emissions",
                            UserId = 2
                        },
                        new
                        {
                            Id = 14,
                            TimeStamp = new DateTime(2022, 9, 20, 1, 0, 12, 0, DateTimeKind.Local),
                            Tweet = "Emphasize community needs",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("mocktwitter_backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserName = "ProjectCanary"
                        },
                        new
                        {
                            Id = 2,
                            UserName = "Trustwell"
                        });
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<int>("FollowedByUsersId")
                        .HasColumnType("int");

                    b.Property<int>("FollowingUsersId")
                        .HasColumnType("int");

                    b.HasKey("FollowedByUsersId", "FollowingUsersId");

                    b.HasIndex("FollowingUsersId");

                    b.ToTable("UserUser");

                    b.HasData(
                        new
                        {
                            FollowedByUsersId = 1,
                            FollowingUsersId = 2
                        });
                });

            modelBuilder.Entity("mocktwitter_backend.Models.MockTweet", b =>
                {
                    b.HasOne("mocktwitter_backend.Models.User", "User")
                        .WithMany("Tweets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("mocktwitter_backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("FollowedByUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mocktwitter_backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("FollowingUsersId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("mocktwitter_backend.Models.User", b =>
                {
                    b.Navigation("Tweets");
                });
#pragma warning restore 612, 618
        }
    }
}
